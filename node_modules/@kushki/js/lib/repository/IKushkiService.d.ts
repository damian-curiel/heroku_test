/* tslint:disable:all */
/**
 * ICardService file.
 */
import { Observable } from "rxjs";
import { ErrorResponse } from "./../../lib/types/error_response";
import { GetBrandsLogosByMerchantResponse } from "./../../lib/types/get_brands_logos_by_merchant_response";
import { ResponseStatusValidator } from "./../../lib/types/response_status_validator";
import { VisaBrandingRequest } from "./../../lib/types/visa_branding_request";
export interface IKushkiService {
    /**
     *  Get Status services
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    checkStatus(mid: string, isTest: boolean, regional: boolean): Observable<ResponseStatusValidator>;
    /**
     *  requestBrandsByMerchant
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    requestBrandsByMerchant(mid: string, isTest: boolean, regional: boolean): Observable<string[]>;
    /**
     * Get brands and logos by Merchant
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     * @return GetBrandsLogosByMerchantResponse[]
     */
    requestBrandsLogosByMerchant(mid: string, isTest: boolean, regional: boolean): Observable<GetBrandsLogosByMerchantResponse[]>;
    /**
     *  runVisaBrandingAnimation
     *  @param callback - function to execute when animation ends
     *  @param body - Define properties of animation
     */
    initVisaBrandingAnimation(isTest: boolean, callback: (error?: ErrorResponse) => void, body?: VisaBrandingRequest): void;
}
