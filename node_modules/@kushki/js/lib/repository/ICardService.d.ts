/* tslint:disable:all */
/**
 * ICardService file.
 */
import { Observable } from "rxjs";
import { BinBody } from "./../../lib/types/bin_body";
import { BinInfoResponse } from "./../../lib/types/bin_info_response";
import { ErrorResponse } from "./../../lib/types/error_response";
import { IDeferredResponse } from "./../../lib/types/remote/deferred_response";
import { TokenResponse } from "./../../lib/types/remote/token_response";
import { SecureInitRequest } from "./../../lib/types/secure_init_request";
import { SecureInitResponse } from "./../../lib/types/secure_init_response";
import { SubscriptionTokenKPayRequest } from "./../../lib/types/subscription_token_kpay_request";
import { SubscriptionTokenRequest } from "./../../lib/types/subscription_token_request";
import { SubscriptionIdRequest } from "./../../lib/types/subscriptionId_request";
import { TokenKPayRequest } from "./../../lib/types/token_kpay_request";
import { TokenRequest } from "./../../lib/types/token_request";
import { Validate3DSRequest } from "./../../lib/types/validate_3ds_request";
import { Validate3DsResponse } from "./../../lib/types/validate_3ds_response";
export declare type IGeneralTokenRequest = TokenRequest | TokenKPayRequest | SubscriptionTokenRequest | SubscriptionTokenKPayRequest;
export interface ICardService {
    /**
     *  Token
     * @param tokenRequest - tokens request body
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     * @param callback
     */
    requestToken(tokenRequest: TokenRequest | TokenKPayRequest, mid: string, isTest: boolean, regional: boolean, callback: (value: TokenResponse | ErrorResponse) => void): void;
    /**
     *  Subscription Token
     * @param subscriptionTokenRequest - subscription tokens request body
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     * @param callback
     */
    requestSubscriptionToken(subscriptionTokenRequest: SubscriptionTokenRequest | SubscriptionTokenKPayRequest, mid: string, isTest: boolean, regional: boolean, callback: (value: TokenResponse | ErrorResponse) => void): void;
    /**
     *  Subscription Token
     * @param binBody - deferred bin request body
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    requestDeferred(binBody: BinBody, mid: string, isTest: boolean, regional: boolean): Observable<IDeferredResponse[]>;
    /**
     * Request Device Token for subscriptions
     * @param deviceTokenRequest - subscription tokens request body
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - for single IP
     * @param callback
     */
    requestDeviceToken(deviceTokenRequest: SubscriptionIdRequest, mid: string, isTest: boolean, regional: boolean, callback: (value: TokenResponse | ErrorResponse) => void): void;
    /**
     *  BinInfo
     * @param binBody - deferred bin request body
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    requestBinInfo(binBody: BinBody, mid: string, isTest: boolean, regional: boolean): Observable<BinInfoResponse>;
    /**
     *  validate3DS
     * @param body - security from token
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     * @param callback - Define callback function to response
     */
    validate3DS(body: Validate3DSRequest, mid: string, isTest: boolean, regional: boolean, callback: (value: Validate3DsResponse | ErrorResponse) => void): void;
    /**
     *  requestSecureInit
     * @param body - Card number
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    requestSecureInit(body: SecureInitRequest, mid: string, isTest: boolean, regional: boolean): Observable<SecureInitResponse>;
}
