/* tslint:disable:all */
/**
 * Interface for Kushki Gateway.
 */
import { Observable } from "rxjs";
import { BankListResponse } from "./../../lib/types/bank_list_response";
import { BinInfoResponse } from "./../../lib/types/bin_info_response";
import { CardAsyncTokenRequest } from "./../../lib/types/card_async_token_request";
import { CardAsyncTokenResponse } from "./../../lib/types/card_async_token_response";
import { CashTokenRequest } from "./../../lib/types/cash_token_request";
import { DeferredOptionsResponse } from "./../../lib/types/deferred_options_response";
import { DeletePaymentMethodRequest } from "./../../lib/types/delete_payment_method_request";
import { GetBrandsLogosByMerchantResponse } from "./../../lib/types/get_brands_logos_by_merchant_response";
import { GetUserId } from "./../../lib/types/get_user_id";
import { JwtResponse } from "./../../lib/types/jwt_response";
import { KushkiSubscriptionTokensRequest } from "./../../lib/types/kushki_subscription_tokens_request";
import { KushkiTokensRequest } from "./../../lib/types/kushki_tokens_request";
import { MerchantSettingsResponse } from "./../../lib/types/merchant_settings_response";
import { MobileProcessorChargeRequest } from "./../../lib/types/mobile_processor_charge_request";
import { MobileProcessorChargeResponse } from "./../../lib/types/mobile_processor_charge_response";
import { MobileProcessorTokenRequest } from "./../../lib/types/mobile_processor_token_request";
import { MobileProcessorTokenResponse } from "./../../lib/types/mobile_processor_token_response";
import { MultiMerchantInfoRequest } from "./../../lib/types/multimerchant_info_request";
import { MultiMerchantInfoResponse } from "./../../lib/types/multimerchant_info_response";
import { PaymentDataResponse } from "./../../lib/types/payment_data_response";
import { PayoutsCashTokenRequest } from "./../../lib/types/payouts_cash_request";
import { PayoutsTransferTokenRequest } from "./../../lib/types/payouts_transfer_token_request";
import { CommissionConfigurationAmount } from "./../../lib/types/remote/commission_configuration_amount";
import { CommissionConfigurationRequest } from "./../../lib/types/remote/commission_configuration_request";
import { TokenResponse } from "./../../lib/types/remote/token_response";
import { TransferTokenRequest } from "./../../lib/types/remote/transfer_token_request";
import { ResponseStatusValidator } from "./../../lib/types/response_status_validator";
import { SavedPaymentMethodRequest } from "./../../lib/types/saved_payment_data_request";
import { SecureOtpRequest } from "./../../lib/types/secure_otp_request";
import { SecureOtpResponse } from "./../../lib/types/secure_otp_response";
import { SubscriptionCardAsyncTokenRequest } from "./../../lib/types/subscription_card_async_token_request";
import { SubscriptionCardAsyncTokenResponse } from "./../../lib/types/subscription_card_async_token_response";
import { TokenChargeRequest } from "./../../lib/types/token_charge_request";
import { TransferSubscriptionTokenRequest } from "./../../lib/types/transfer_subscription_token_request";
export interface IKushkiGateway {
    /**
     * Send POST requests to Kushki Gateway
     */
    request(body: object, headers: object, path: string, testEnv: boolean, singleIP: boolean, authorization?: string): Observable<object>;
    /**
     * Send GET requests to Kushki Gateway
     */
    requestGet(path: string, testEnv: boolean, regional: boolean, mid?: string): Observable<object>;
    /**
     * Send DELETE requests to Kushki Gateway
     */
    requestDelete<T extends object = object>(path: string, testEnv: boolean, regional: boolean, mid: string, authorization: string): Observable<T>;
    /**
     * Send tokens request to Kushki API
     */
    requestToken(body: KushkiTokensRequest, mid: string, testEnv: boolean, regional: boolean, authorization?: string): Observable<TokenResponse>;
    /**
     * Send charge tokens request to Kushki API
     */
    requestDeviceToken(body: TokenChargeRequest, mid: string, testEnv: boolean, regional: boolean): Observable<TokenResponse>;
    /**
     * Send tokens subscription request to Kushki API
     */
    requestSubscriptionToken(body: KushkiSubscriptionTokensRequest, mid: string, testEnv: boolean, regional: boolean, authorization?: string): Observable<TokenResponse>;
    /**
     * Send transfer tokens request to Kushki API
     */
    requestTransferToken(body: TransferTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<TokenResponse>;
    /**
     * Send merchant settings request to Kushki API
     */
    requestMerchantSettings(mid: string, testEnv: boolean, regional: boolean): Observable<MerchantSettingsResponse>;
    /**
     * Send merchant settings request to Kushki API
     */
    requestPseBankList(mid: string, testEnv: boolean, regional: boolean): Observable<BankListResponse>;
    /**
     * Send banklist request to Kushki API
     */
    requestBankList(mid: string, testEnv: boolean, regional: boolean): Observable<BankListResponse>;
    /**
     * Request deferred information by bin to Kushki API
     */
    requestDeferredConditions(mid: string, bin: string, testEnv: boolean, regional: boolean): Observable<DeferredOptionsResponse>;
    /**
     * Request token cash to Kushki API
     */
    requestCashToken(body: CashTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<TokenResponse>;
    /**
     * Get status Services
     */
    checkStatus(mid: string, testEnv: boolean, regional: boolean): Observable<ResponseStatusValidator>;
    /**
     * Get Secure Services Validation
     */
    requestSecureServiceValidation(mid: string, request: SecureOtpRequest, isTest: boolean, regional: boolean): Observable<SecureOtpResponse>;
    /**
     * Request deferred information by bin to Kushki API
     */
    requestBinInfo(mid: string, bin: string, testEnv: boolean, regional: boolean): Observable<BinInfoResponse>;
    /**
     *  requestBrandsByMerchant
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    requestBrandsByMerchant(mid: string, isTest: boolean, regional: boolean): Observable<string[]>;
    /**
     * Get brands and logos by Merchant
     * @param mid - public merchant id
     * @param isTest - is test environment
     * @param regional - Define if endpoint used regional URL
     * @return GetBrandsLogosByMerchantResponse[]
     */
    requestBrandsLogosByMerchant(mid: string, isTest: boolean, regional: boolean): Observable<GetBrandsLogosByMerchantResponse[]>;
    /**
     * Send Webpay tokens request to Transbank API
     */
    requestCardAsyncToken(body: CardAsyncTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<CardAsyncTokenResponse>;
    /**
     * Send SubscriptionWebpay tokens request to Transbank API
     */
    requestSubscriptionCardAsyncToken(body: SubscriptionCardAsyncTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<SubscriptionCardAsyncTokenResponse>;
    multiMerchantInfo(request: MultiMerchantInfoRequest, mid: string, isTest: boolean, regional: boolean): Observable<MultiMerchantInfoResponse>;
    /**
     * Request token payouts cash to Kushki API
     */
    requestPayoutsCashToken(body: PayoutsCashTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<TokenResponse>;
    getCommissionConfiguration(request: CommissionConfigurationRequest, mid: string, isTest: boolean, regional: boolean): Observable<CommissionConfigurationAmount>;
    requestTokenTransferSubscription(body: TransferSubscriptionTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<TokenResponse>;
    /**
     * Request token payouts transfer to Kushki API
     */
    requestPayoutsTransferToken(body: PayoutsTransferTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<TokenResponse>;
    /**
     * Request banklist payouts transfer to Kushki API
     */
    requestPayoutsTransferBankList(mid: string, testEnv: boolean, regional: boolean): Observable<BankListResponse>;
    /**
     * @param body - MobileProcessor token request
     * @param publicCredential - public credential for request
     * @param testEnv - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    requestMobileProcessorToken(body: MobileProcessorTokenRequest, publicCredential: string, testEnv: boolean, regional: boolean): Observable<MobileProcessorTokenResponse>;
    /**
     * @param body - MobileProcessor token request
     * @param publicCredential - public credential for request
     * @param testEnv - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    chargeMobileProcessor(body: MobileProcessorChargeRequest, publicCredential: string, testEnv: boolean, regional: boolean): Observable<MobileProcessorChargeResponse>;
    /**
     * @param body
     * @param testEnv
     * @param mid - public credential for request
     * @param regional - Define if endpoint used regional URL
     * @param authorization
     */
    deletePaymentMethod(body: DeletePaymentMethodRequest, testEnv: boolean, regional: boolean, mid: string, authorization: string): Observable<boolean>;
    /**
     * @param body
     * @param testEnv
     * @param mid - public credential for request
     * @param regional - Define if endpoint used regional URL
     */
    requestSavedPaymentMethods(body: SavedPaymentMethodRequest, testEnv: boolean, regional: boolean, mid: string): Observable<PaymentDataResponse[]>;
    /**
     * Get JWT for 3DS
     * @param mid - public credential for request
     * @param testEnv - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    cybersourceJwt(mid: string, testEnv: boolean, regional: boolean, subscriptionId?: string): Observable<JwtResponse>;
    /**
     * Get userId
     * @param subscriptionId subscription id for the request
     * @param mid public credential for request
     * @param testEnv - is test environment
     * @param regional - Define if endpoint used regional URL
     */
    getUserId(subscriptionId: string, mid: string, testEnv: boolean, regional: boolean): Observable<GetUserId>;
}
