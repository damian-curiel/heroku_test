/* tslint:disable:all */
import "reflect-metadata";
import { IKushkiGateway } from "./../../lib/repository/IKushkiGateway";
import { Observable } from "rxjs";
import { BankListResponse } from "./../../lib/types/bank_list_response";
import { BinInfoResponse } from "./../../lib/types/bin_info_response";
import { CardAsyncTokenRequest } from "./../../lib/types/card_async_token_request";
import { CardAsyncTokenResponse } from "./../../lib/types/card_async_token_response";
import { CashTokenRequest } from "./../../lib/types/cash_token_request";
import { DeferredOptionsResponse } from "./../../lib/types/deferred_options_response";
import { DeletePaymentMethodRequest } from "./../../lib/types/delete_payment_method_request";
import { GetBrandsLogosByMerchantResponse } from "./../../lib/types/get_brands_logos_by_merchant_response";
import { GetUserId } from "./../../lib/types/get_user_id";
import { JwtResponse } from "./../../lib/types/jwt_response";
import { KushkiSubscriptionTokensRequest } from "./../../lib/types/kushki_subscription_tokens_request";
import { KushkiTokensRequest } from "./../../lib/types/kushki_tokens_request";
import { MerchantSettingsResponse } from "./../../lib/types/merchant_settings_response";
import { MobileProcessorChargeRequest } from "./../../lib/types/mobile_processor_charge_request";
import { MobileProcessorChargeResponse } from "./../../lib/types/mobile_processor_charge_response";
import { MobileProcessorTokenRequest } from "./../../lib/types/mobile_processor_token_request";
import { MobileProcessorTokenResponse } from "./../../lib/types/mobile_processor_token_response";
import { MultiMerchantInfoRequest } from "./../../lib/types/multimerchant_info_request";
import { MultiMerchantInfoResponse } from "./../../lib/types/multimerchant_info_response";
import { PaymentDataResponse } from "./../../lib/types/payment_data_response";
import { PayoutsCashTokenRequest } from "./../../lib/types/payouts_cash_request";
import { PayoutsTransferTokenRequest } from "./../../lib/types/payouts_transfer_token_request";
import { CommissionConfigurationAmount } from "./../../lib/types/remote/commission_configuration_amount";
import { CommissionConfigurationRequest } from "./../../lib/types/remote/commission_configuration_request";
import { TokenResponse } from "./../../lib/types/remote/token_response";
import { TransferTokenRequest } from "./../../lib/types/remote/transfer_token_request";
import { ResponseStatusValidator } from "./../../lib/types/response_status_validator";
import { SavedPaymentMethodRequest } from "./../../lib/types/saved_payment_data_request";
import { SecureOtpRequest } from "./../../lib/types/secure_otp_request";
import { SecureOtpResponse } from "./../../lib/types/secure_otp_response";
import { SubscriptionCardAsyncTokenRequest } from "./../../lib/types/subscription_card_async_token_request";
import { SubscriptionCardAsyncTokenResponse } from "./../../lib/types/subscription_card_async_token_response";
import { TokenChargeRequest } from "./../../lib/types/token_charge_request";
import { TransferSubscriptionTokenRequest } from "./../../lib/types/transfer_subscription_token_request";
/**
 * Kushki Gateway Implementation
 */
export declare class KushkiGateway implements IKushkiGateway {
    private static _aurusError;
    private readonly _publicHeader;
    private readonly _contentHeader;
    private readonly _contentJSON;
    private readonly _kushkiInfoHeader;
    private _uatUrl;
    private _prodUrl;
    private _kshAuthorization;
    request<T = object>(body: object, headers: object, path: string, testEnv: boolean, regional: boolean): Observable<T>;
    requestGet<T extends object = object>(path: string, testEnv: boolean, regional: boolean, mid?: string): Observable<T>;
    requestDelete<T extends object = object>(path: string, testEnv: boolean, regional: boolean, mid: string, authorization: string): Observable<T>;
    requestBrandsByMerchant(mid: string, testEnv: boolean, regional: boolean): Observable<string[]>;
    requestBrandsLogosByMerchant(mid: string, testEnv: boolean, regional: boolean): Observable<GetBrandsLogosByMerchantResponse[]>;
    requestToken(body: KushkiTokensRequest, mid: string, testEnv: boolean, regional: boolean, authorization?: string): Observable<TokenResponse>;
    requestDeviceToken(body: TokenChargeRequest, mid: string, testEnv: boolean, regional: boolean): Observable<TokenResponse>;
    requestSubscriptionToken(body: KushkiSubscriptionTokensRequest, mid: string, testEnv: boolean, regional: boolean, authorization?: string): Observable<TokenResponse>;
    requestTransferToken(body: TransferTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<TokenResponse>;
    requestMerchantSettings(mid: string, testEnv: boolean, regional: boolean): Observable<MerchantSettingsResponse>;
    requestPseBankList(mid: string, testEnv: boolean, regional: boolean): Observable<BankListResponse>;
    requestDeferredConditions(mid: string, bin: string, testEnv: boolean, regional: boolean): Observable<DeferredOptionsResponse>;
    requestBinInfo(mid: string, bin: string, testEnv: boolean, regional: boolean): Observable<BinInfoResponse>;
    requestCashToken(body: CashTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<TokenResponse>;
    checkStatus(mid: string, testEnv: boolean, regional: boolean): Observable<ResponseStatusValidator>;
    requestSecureServiceValidation(mid: string, request: SecureOtpRequest, isTest: boolean, regional: boolean): Observable<SecureOtpResponse>;
    requestCardAsyncToken(body: CardAsyncTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<CardAsyncTokenResponse>;
    requestSubscriptionCardAsyncToken(body: SubscriptionCardAsyncTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<SubscriptionCardAsyncTokenResponse>;
    multiMerchantInfo(request: MultiMerchantInfoRequest, mid: string, isTest: boolean, regional: boolean): Observable<MultiMerchantInfoResponse>;
    requestPayoutsCashToken(body: PayoutsCashTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<TokenResponse>;
    requestPayoutsTransferToken(body: PayoutsTransferTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<TokenResponse>;
    getCommissionConfiguration(request: CommissionConfigurationRequest, mid: string, isTest: boolean, regional: boolean): Observable<CommissionConfigurationAmount>;
    requestTokenTransferSubscription(body: TransferSubscriptionTokenRequest, mid: string, testEnv: boolean, regional: boolean): Observable<TokenResponse>;
    requestBankList(mid: string, testEnv: boolean, regional: boolean): Observable<BankListResponse>;
    requestPayoutsTransferBankList(mid: string, testEnv: boolean, regional: boolean): Observable<BankListResponse>;
    requestMobileProcessorToken(body: MobileProcessorTokenRequest, publicCredential: string, testEnv: boolean, regional: boolean): Observable<MobileProcessorTokenResponse>;
    chargeMobileProcessor(body: MobileProcessorChargeRequest, publicCredential: string, testEnv: boolean, regional: boolean): Observable<MobileProcessorChargeResponse>;
    deletePaymentMethod(body: DeletePaymentMethodRequest, testEnv: boolean, regional: boolean, mid: string, authorization: string): Observable<boolean>;
    requestSavedPaymentMethods(body: SavedPaymentMethodRequest, testEnv: boolean, regional: boolean, mid: string): Observable<PaymentDataResponse[]>;
    cybersourceJwt(mid: string, testEnv: boolean, regional: boolean, subscriptionId?: string): Observable<JwtResponse>;
    getUserId(subscriptionId: string, mid: string, testEnv: boolean, regional: boolean): Observable<GetUserId>;
    private _assignChannel;
    private _buildHeader;
}
