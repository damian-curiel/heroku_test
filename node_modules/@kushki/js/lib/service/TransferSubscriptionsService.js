"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
exports.__esModule = true;
exports.TransferSubscriptionsService = void 0;
var Identifiers_1 = require("./../../lib/constant/Identifiers");
var inversify_1 = require("inversify");
var TransferSubscriptionsService = /** @class */ (function () {
    function TransferSubscriptionsService(antiFraud, gateway) {
        this._antiFraud = antiFraud;
        this._gateway = gateway;
    }
    TransferSubscriptionsService.prototype.requestToken = function (tokenRequest, mid, isTest, regional) {
        return this._gateway.requestTokenTransferSubscription(tokenRequest, mid, isTest, regional);
    };
    TransferSubscriptionsService.prototype.requestBankList = function (mid, isTest, regional) {
        return this._gateway.requestBankList(mid, isTest, regional);
    };
    TransferSubscriptionsService = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(Identifiers_1.IDENTIFIERS.AntiFraud)),
        __param(1, inversify_1.inject(Identifiers_1.IDENTIFIERS.KushkiGateway)),
        __metadata("design:paramtypes", [Object, Object])
    ], TransferSubscriptionsService);
    return TransferSubscriptionsService;
}());
exports.TransferSubscriptionsService = TransferSubscriptionsService;
