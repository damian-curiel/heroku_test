/* tslint:disable:all */
/**
 * MobileProcessor Service file
 */
import { IKushkiGateway } from "./../../lib/repository/IKushkiGateway";
import { IMobileProcessorService } from "./../../lib/repository/IMobileProcessorService";
import { Observable, Observer } from "rxjs";
import { MobileProcessorChargeResponse } from "./../../lib/types/mobile_processor_charge_response";
import { MobileProcessorToken } from "./../../lib/types/mobile_processor_token";
import { MobileProcessorTokenRequest } from "./../../lib/types/mobile_processor_token_request";
import { MobileProcessorTokenResponse } from "./../../lib/types/mobile_processor_token_response";
/**
 * Implementation
 */
export declare type Session = {
    session: any;
    validation_url?: string;
    current_url?: string;
    payment_token?: object;
};
export declare class MobileProcessorService implements IMobileProcessorService {
    private readonly _gateway;
    constructor(gateway: IKushkiGateway);
    requestToken(request: MobileProcessorTokenRequest, publicCredential: string, isTest: boolean, regional: boolean): Observable<MobileProcessorToken>;
    requestGatewayToken(request: MobileProcessorTokenRequest, session: Session, publicCredential: string, isTest: boolean, regional: boolean): Observable<[Session, MobileProcessorTokenResponse]>;
    requestGatewayCharge(token: string, publicCredential: string, isTest: boolean, regional: boolean, request: MobileProcessorTokenRequest, session: Session): Observable<[Session, MobileProcessorChargeResponse]>;
    createAppleRequest(request: MobileProcessorTokenRequest): object;
    completePayment(session: Session, response: MobileProcessorChargeResponse): Observable<MobileProcessorChargeResponse>;
    onvalidatemerchant(event: {
        validationURL: string;
    }, observer: Observer<Session>, session: any): void;
    paymentAuthorized(event: {
        payment: object;
    }, observer: Observer<Session>, session: Session): void;
}
