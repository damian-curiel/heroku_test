"use strict";
exports.__esModule = true;
exports.getBinFromCreditCardNumberSift = exports.getBinFromCreditCardNumber = exports.UtilsService = void 0;
/**
 * UtilsService Class
 */
var CreditCardEspecifications_1 = require("./../../lib/constant/CreditCardEspecifications");
var UtilsService = /** @class */ (function () {
    function UtilsService() {
    }
    /**
     * Lodash native methods implementation: https://youmightnotneed.com/lodash/
     */
    /**
     * Gets the value at path of object. Note: If provided path does not exists inside the object js will generate error.
     * @param obj
     * @param path
     * @param defValue
     */
    // tslint:disable-next-line:no-any
    UtilsService.sGet = function (obj, path, defValue) {
        if (defValue === void 0) { defValue = undefined; }
        // If path is not defined or it has false value
        if (!path)
            return;
        // Check if path is string or array. Regex : ensure that we do not have '.' and brackets.
        // Regex explained: https://regexr.com/58j0k
        var path_array = Array.isArray(path) ? path : path.match(/([^[.\]])+/g);
        // Find value if exist return otherwise return undefined value;
        return (path_array.reduce(function (prevObj, key) { return prevObj && prevObj[key]; }, obj) ||
            defValue);
    };
    /**
     * Sets the value at path of object. If a portion of path doesn't exist, it's created. Arrays are created for missing index properties while objects are created for all other missing properties.
     * @param obj
     * @param path
     * @param value
     */
    UtilsService.sSet = function (obj, path, value) {
        // Regex explained: https://regexr.com/58j0k
        var path_array = Array.isArray(path) ? path : path.match(/([^[.\]])+/g);
        path_array.reduce(function (acc, key, i) {
            if (acc[key] === undefined)
                acc[key] = {};
            if (i === path_array.length - 1)
                acc[key] = value;
            return acc[key];
        }, obj);
        return obj;
    };
    /**
     * Checks if value is an empty object or collection.
     * @param obj
     */
    UtilsService.sIsEmpty = function (obj) {
        return [Object, Array].includes((obj || {}).constructor) &&
            !Object.entries(obj || {}).length;
    };
    return UtilsService;
}());
exports.UtilsService = UtilsService;
function getBinFromCreditCardNumber(value) {
    var card_value = value.replace(/\D/g, "");
    return card_value.slice(CreditCardEspecifications_1.CREDIT_CARD_ESPECIFICATIONS.cardInitialBinPlace, CreditCardEspecifications_1.CREDIT_CARD_ESPECIFICATIONS.cardFinalBinPlace);
}
exports.getBinFromCreditCardNumber = getBinFromCreditCardNumber;
function getBinFromCreditCardNumberSift(value) {
    var card_value = value.replace(/\D/g, "");
    return card_value.slice(CreditCardEspecifications_1.CREDIT_CARD_ESPECIFICATIONS.cardInitialBinPlace, CreditCardEspecifications_1.CREDIT_CARD_ESPECIFICATIONS.cardFinalBinPlaceSift);
}
exports.getBinFromCreditCardNumberSift = getBinFromCreditCardNumberSift;
