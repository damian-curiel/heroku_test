"use strict";
// tslint:disable:no-identical-functions
/**
 * Card Service file
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.CardService = void 0;
var cardinal_sandbox_js_1 = require("@kushki/cardinal-sandbox-js");
var Identifiers_1 = require("./../../lib/constant/Identifiers");
var dot = require("dot-object");
var KushkiError_1 = require("./../../lib/generic/KushkiError");
var ErrorEnum_1 = require("./../../lib/infrastructure/ErrorEnum");
var ThreeDSEnum_1 = require("./../../lib/infrastructure/ThreeDSEnum");
var inversify_1 = require("inversify");
require("reflect-metadata");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var UtilsService_1 = require("./../../lib/service/UtilsService");
var Kushki_1 = require("./../../lib/Kushki");
var CardService = /** @class */ (function () {
    function CardService(gateway, authService, antiFraud) {
        var _a;
        this._3Dsecure = "active_3dsecure";
        this._cardNumber = "card.number";
        this._sandboxEnable = false;
        this._gateway = gateway;
        this._antiFraud = antiFraud;
        this._authService = authService;
        this._receipt = (_a = {
                amount: "totalAmount",
                "card.cvc": "card.cvv",
                "card.expiryMonth": "card.expiryMonth",
                "card.expiryYear": "card.expiryYear",
                "card.name": "card.name"
            },
            _a[this._cardNumber] = this._cardNumber,
            _a.currency = "currency",
            _a.emailRequest = "email",
            _a.isDeferred = "isDeferred",
            _a.jwt = "jwt",
            _a.merchantName = "merchantName",
            _a.months = "months",
            _a.savePaymentData = "savePaymentData",
            _a.sessionId = "sessionId",
            _a.userId = "userId",
            _a.walletId = "walletId",
            _a);
    }
    CardService_1 = CardService;
    CardService.prototype.requestToken = function (request, mid, isTest, regional, callback) {
        var _this = this;
        this._gateway
            .requestMerchantSettings(mid, isTest, regional)
            .pipe(operators_1.switchMap(function (merchant) {
            _this._setSandboxEnable(!!merchant.sandboxEnable);
            return rxjs_1.forkJoin([
                _this._getScienceSession(request, mid, isTest, merchant),
                _this._getCybersourceJwt(merchant, mid, isTest, regional, Object.prototype.hasOwnProperty.call(request, "card")
                    ? request.card.number
                    : undefined),
                rxjs_1.of(merchant),
            ]);
        }), operators_1.mergeMap(function (_a) {
            var sift_object = _a[0], jwt = _a[1], merchant = _a[2];
            request.isDeferred =
                request.isDeferred === undefined ? false : request.isDeferred;
            if (Boolean(request.cvv))
                request.card = { cvc: request.cvv };
            _this._checkRequestBody(request);
            var data_to_transform = __assign(__assign({}, request), sift_object);
            if (jwt !== undefined)
                data_to_transform.jwt = jwt;
            return rxjs_1.forkJoin([
                rxjs_1.of(dot.transform(_this._receipt, __assign(__assign({}, data_to_transform), { merchantName: merchant.merchant_name }))),
                request.walletId
                    ? _this._authService.getAuthorizationToken()
                    : rxjs_1.of(undefined),
                rxjs_1.of(merchant),
            ]);
        }))
            .subscribe({
            error: function (err) {
                return Kushki_1.Kushki.callbackError(err, callback);
            },
            next: function (_a) {
                var final_request = _a[0], authorization = _a[1], merchant = _a[2];
                if (final_request.jwt && !merchant.sandboxEnable)
                    _this._request3DSToken(isTest, function () {
                        _this._requestTokenGateway(final_request, mid, isTest, regional, callback, authorization);
                    });
                else
                    _this._requestTokenGateway(final_request, mid, isTest, regional, callback, authorization);
            }
        });
    };
    CardService.prototype.requestDeviceToken = function (request, mid, isTest, regional, callback) {
        var _this = this;
        this._gateway
            .requestMerchantSettings(mid, isTest, regional)
            .pipe(operators_1.switchMap(function (merchant) {
            _this._setSandboxEnable(!!merchant.sandboxEnable);
            return rxjs_1.forkJoin([
                _this._getDeviceTokenSiftScienceObject(request, mid, isTest, merchant, regional),
                _this._getCybersourceJwtSubscription(merchant, mid, isTest, regional, request.subscriptionId),
            ]);
        }))
            .subscribe({
            error: function (err) {
                return Kushki_1.Kushki.callbackError(err, callback);
            },
            next: function (_a) {
                var sift_science_obj = _a[0], jwt = _a[1];
                if (sift_science_obj.userId === null)
                    delete sift_science_obj.userId;
                if (sift_science_obj.sessionId === null)
                    delete sift_science_obj.sessionId;
                if (jwt && !_this._sandboxEnable) {
                    sift_science_obj = __assign(__assign({}, sift_science_obj), { jwt: jwt, amount: request.amount, cardHolderName: request.cardHolderName, currency: request.currency });
                    _this._request3DSToken(isTest, function () {
                        sift_science_obj = __assign(__assign({}, sift_science_obj), { jwt: jwt });
                        _this._requestDeviceToken(__assign({ subscriptionId: request.subscriptionId }, sift_science_obj), mid, isTest, regional, callback);
                    });
                }
                else {
                    sift_science_obj = __assign(__assign({}, sift_science_obj), { jwt: jwt });
                    _this._requestDeviceToken(__assign({ subscriptionId: request.subscriptionId }, sift_science_obj), mid, isTest, regional, callback);
                }
            }
        });
    };
    CardService.prototype.requestSubscriptionToken = function (subscriptionTokenRequest, mid, isTest, regional, callback) {
        var _this = this;
        this._gateway
            .requestMerchantSettings(mid, isTest, regional)
            .pipe(operators_1.switchMap(function (merchant) {
            _this._setSandboxEnable(!!merchant.sandboxEnable);
            return rxjs_1.forkJoin([
                _this._getScienceSession(subscriptionTokenRequest, mid, isTest, merchant),
                _this._getCybersourceJwt(merchant, mid, isTest, regional, UtilsService_1.UtilsService.sGet(subscriptionTokenRequest, _this._cardNumber)),
                rxjs_1.of(merchant),
            ]);
        }), operators_1.mergeMap(function (_a) {
            var sift_object = _a[0], jwt = _a[1], merchant = _a[2];
            _this._checkRequestBody(subscriptionTokenRequest);
            var data_to_transform = _this._getCreateSubscriptionDataToTransform(sift_object, subscriptionTokenRequest);
            if (jwt !== undefined)
                data_to_transform.jwt = jwt;
            return rxjs_1.forkJoin([
                rxjs_1.of(dot.transform(_this._receipt, __assign(__assign({}, data_to_transform), { merchantName: merchant.merchant_name }))),
                subscriptionTokenRequest.walletId
                    ? _this._authService.getAuthorizationToken()
                    : rxjs_1.of(undefined),
                rxjs_1.of(merchant),
            ]);
        }))
            .subscribe({
            error: function (err) {
                return Kushki_1.Kushki.callbackError(err, callback);
            },
            next: function (_a) {
                var body = _a[0], jwt = _a[1], merchant = _a[2];
                if (body.jwt && !merchant.sandboxEnable)
                    _this._request3DSToken(isTest, function () {
                        _this._requestSubscriptionTokenGateway(body, mid, isTest, regional, callback, jwt);
                    });
                else
                    _this._requestSubscriptionTokenGateway(body, mid, isTest, regional, callback, jwt);
            }
        });
    };
    CardService.prototype.requestDeferred = function (binBody, mid, isTest, regional) {
        return this._gateway.requestDeferredConditions(mid, binBody.bin, isTest, regional);
    };
    CardService.prototype.requestBinInfo = function (binBody, mid, isTest, regional) {
        return this._gateway.requestBinInfo(mid, UtilsService_1.getBinFromCreditCardNumber(String(binBody.bin)), isTest, regional);
    };
    CardService.prototype.validate3DS = function (body, mid, isTest, regional, callback) {
        var _this = this;
        // tslint:disable-next-line
        if (body.security === undefined)
            return Kushki_1.Kushki.callbackError(new KushkiError_1.KushkiError(ErrorEnum_1.ERRORS.E012), callback);
        if (!UtilsService_1.UtilsService.sGet(body, "security.authRequired", false)) {
            callback({ isValid: true });
            return;
        }
        if (UtilsService_1.UtilsService.sGet(body, "security.authRequired") &&
            this._validateParameters(body))
            return Kushki_1.Kushki.callbackError(new KushkiError_1.KushkiError(ErrorEnum_1.ERRORS.E012), callback);
        if (this._sandboxEnable ||
            UtilsService_1.UtilsService.sGet(body, "security.paReq", ThreeDSEnum_1.ThreeDSEnum.SANDBOX) ===
                ThreeDSEnum_1.ThreeDSEnum.SANDBOX)
            return this._ccaSandbox(body, mid, isTest, regional, callback);
        if (isTest) {
            // tslint:disable-next-line:no-duplicate-string
            Promise.resolve().then(function () { return require("./../../lib/libs/cardinal/staging"); }).then(function () {
                CardService_1._ccaCardinal(body);
            });
            Promise.resolve().then(function () { return require("./../../lib/libs/cardinal/staging"); }).then(function () {
                _this._completeCardinal(body.secureId, mid, isTest, regional, callback);
            });
        }
        else {
            // tslint:disable-next-line:no-duplicate-string
            Promise.resolve().then(function () { return require("./../../lib/libs/cardinal/prod"); }).then(function () {
                CardService_1._ccaCardinal(body);
            });
            Promise.resolve().then(function () { return require("./../../lib/libs/cardinal/prod"); }).then(function () {
                _this._completeCardinal(body.secureId, mid, isTest, regional, callback);
            });
        }
    };
    CardService.prototype.requestSecureInit = function (request, mid, isTest, regional) {
        var _this = this;
        return rxjs_1.of(1).pipe(operators_1.map(function () { return _this._checkCardLength(request, ErrorEnum_1.ErrorCode.E014); }), operators_1.switchMap(function () { return _this._getMerchantSettings(mid, isTest, regional); }), operators_1.switchMap(function (merchantSettings) {
            return rxjs_1.iif(function () { return _this._is3DSSecureEnabled(merchantSettings); }, rxjs_1.of(merchantSettings), rxjs_1.throwError(new KushkiError_1.KushkiError(ErrorEnum_1.ERRORS.E013)));
        }), operators_1.switchMap(function (merchant) {
            return _this._getCybersourceJwt(merchant, mid, isTest, regional, request.card.number);
        }), operators_1.map(function (jwt) { return ({
            jwt: jwt
        }); }));
    };
    CardService.prototype._getCreateSubscriptionDataToTransform = function (siftObject, subscriptionTokenRequest) {
        if (siftObject.userId === null || siftObject.sessionId === null)
            return __assign({}, subscriptionTokenRequest);
        return __assign(__assign({}, subscriptionTokenRequest), siftObject);
    };
    CardService.prototype._request3DSToken = function (isTest, requestToken) {
        var _this = this;
        if (isTest)
            Promise.resolve().then(function () { return require("./../../lib/libs/cardinal/staging"); }).then(function () {
                _this._setupCompleteCardinal(requestToken);
            });
        else
            Promise.resolve().then(function () { return require("./../../lib/libs/cardinal/prod"); }).then(function () {
                _this._setupCompleteCardinal(requestToken);
            });
    };
    // istanbul ignore next
    CardService.prototype._setupCompleteCardinal = function (requestToken) {
        var _this = this;
        window.Cardinal.on("payments.setupComplete", function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                requestToken();
                return [2 /*return*/];
            });
        }); });
    };
    // istanbul ignore next
    CardService.prototype._requestTokenGateway = function (body, mid, testEnv, regional, callback, authorization) {
        var request_token = this._gateway.requestToken(body, mid, testEnv, regional, authorization);
        return request_token.subscribe({
            error: function (err) {
                return Kushki_1.Kushki.callbackError(err, callback);
            },
            next: function (response) {
                callback(response);
            }
        });
    };
    CardService.prototype._getMerchantSettings = function (mid, isTest, regional) {
        var _this = this;
        return this._gateway.requestMerchantSettings(mid, isTest, regional).pipe(operators_1.map(function (merchant) {
            _this._setSandboxEnable(!!merchant.sandboxEnable);
            return merchant;
        }));
    };
    CardService.prototype._validateParameters = function (body) {
        return (body.security.acsURL === undefined ||
            body.security.paReq === undefined ||
            body.security.authenticationTransactionId === undefined);
    };
    CardService.prototype._getDeviceTokenSiftScienceObject = function (request, mid, isTest, merchant, regional) {
        var _this = this;
        return rxjs_1.of(1).pipe(operators_1.switchMap(function () {
            return rxjs_1.iif(function () {
                return request.sessionId !== undefined &&
                    request.sessionId !== null &&
                    (request.userId !== undefined && request.userId !== null);
            }, _this._getRequestSiftObject(request.userId, request.sessionId), _this._createSubscriptionSiftScienceSession(request.subscriptionId, mid, isTest, merchant, regional, request));
        }));
    };
    CardService.prototype._createSubscriptionSiftScienceSession = function (subscriptionId, mid, isTest, merchantSettingsResponse, regional, request) {
        var _this = this;
        return rxjs_1.of(1).pipe(operators_1.switchMap(function () {
            return _this._getUserId(subscriptionId, mid, isTest, regional, request.userId);
        }), operators_1.switchMap(function (getUserIdResponse) {
            return _this._antiFraud.createSiftScienceSession(subscriptionId, "", mid, isTest, merchantSettingsResponse, UtilsService_1.UtilsService.sGet(getUserIdResponse, "userId"));
        }));
    };
    CardService.prototype._checkCardLength = function (request, errorCode) {
        if (errorCode === void 0) { errorCode = ErrorEnum_1.ErrorCode.E005; }
        if (request.card.number.length < 14 || request.card.number.length > 19)
            throw new KushkiError_1.KushkiError(ErrorEnum_1.ERRORS[errorCode]);
    };
    CardService.prototype._getScienceSession = function (request, mid, isTest, merchant) {
        var _this = this;
        return rxjs_1.of(1).pipe(operators_1.switchMap(function () {
            if (request.card && request.card.number !== undefined)
                return _this._antiFraud.createSiftScienceSession(UtilsService_1.getBinFromCreditCardNumberSift(request.card.number), request.card.number.slice(-4), mid, isTest, merchant);
            return rxjs_1.of({
                sessionId: null,
                userId: null
            });
        }));
    };
    CardService.prototype._checkCurrency = function (request) {
        request.currency =
            request.currency === undefined ? "USD" : request.currency;
    };
    CardService.prototype._getRequestSiftObject = function (userId, sessionId) {
        return rxjs_1.of(1).pipe(operators_1.map(function () { return ({
            sessionId: sessionId,
            userId: userId
        }); }));
    };
    CardService.prototype._checkAmount = function (request) {
        if (request.amount !== undefined && typeof request.amount === "string")
            request.amount = parseFloat(request.amount);
    };
    CardService.prototype._checkRequestBody = function (request) {
        this._checkCurrency(request);
        if (Boolean(request.card) && Boolean(request.card.number))
            this._checkCardLength(request);
        this._checkAmount(request);
    };
    CardService.prototype._getCybersourceJwt = function (merchantSettings, mid, isTest, regional, cardNumber) {
        var _this = this;
        return rxjs_1.of(1).pipe(operators_1.switchMap(function () {
            if (_this._is3DSSecureEnabled(merchantSettings) &&
                cardNumber !== undefined)
                return rxjs_1.iif(function () { return _this._isSandboxEnabled(merchantSettings); }, _this._initCybersourceSandbox(mid, isTest, regional), _this._initCybersource(cardNumber, mid, isTest, regional));
            return rxjs_1.of(undefined);
        }));
    };
    CardService.prototype._isSandboxEnabled = function (merchantSettings) {
        return !!merchantSettings.sandboxEnable;
    };
    CardService.prototype._getCybersourceJwtSubscription = function (merchantSettings, mid, isTest, regional, subscriptionId) {
        var _this = this;
        return rxjs_1.of(1).pipe(operators_1.switchMap(function () {
            if (_this._is3DSSecureEnabled(merchantSettings))
                return rxjs_1.iif(function () { return _this._isSandboxEnabled(merchantSettings); }, _this._initCybersourceSandbox(mid, isTest, regional), _this._initCybersourceSubscription(subscriptionId, mid, isTest, regional));
            return rxjs_1.of(undefined);
        }));
    };
    CardService.prototype._is3DSSecureEnabled = function (merchantSettings) {
        return merchantSettings[this._3Dsecure] === true;
    };
    CardService.prototype._initCybersource = function (cardNumber, mid, isTest, regional) {
        var _this = this;
        return rxjs_1.of(1).pipe(operators_1.switchMap(function () { return _this._gateway.cybersourceJwt(mid, isTest, regional); }), operators_1.map(function (jwtResponse) {
            _this._initializeCardinal(isTest, jwtResponse.jwt, cardNumber);
            return jwtResponse.jwt;
        }));
    };
    CardService.prototype._initializeCardinal = function (isTest, jwt, identifier) {
        if (isTest)
            Promise.resolve().then(function () { return require("./../../lib/libs/cardinal/staging"); }).then(function () {
                CardService_1._initCardinal(jwt, identifier);
            });
        else
            Promise.resolve().then(function () { return require("./../../lib/libs/cardinal/prod"); }).then(function () {
                CardService_1._initCardinal(jwt, identifier);
            });
    };
    CardService.prototype._initCybersourceSubscription = function (subscriptionId, mid, isTest, regional) {
        var _this = this;
        return rxjs_1.of(1).pipe(operators_1.switchMap(function () {
            return _this._gateway.cybersourceJwt(mid, isTest, regional, subscriptionId);
        }), operators_1.map(function (jwtResponse) {
            var bin = Buffer.from(jwtResponse.identifier, "base64").toString("ascii");
            _this._initializeCardinal(isTest, jwtResponse.jwt, bin);
            return jwtResponse.jwt;
        }));
    };
    // istanbul ignore next
    CardService.prototype._completeCardinal = function (secureServiceId, mid, isTest, regional, callback) {
        var _this = this;
        return window.Cardinal.on("payments.validated", function () { return __awaiter(_this, void 0, void 0, function () {
            var otp_request, secure;
            return __generator(this, function (_a) {
                otp_request = {
                    secureServiceId: secureServiceId,
                    otpValue: ""
                };
                secure = this._gateway.requestSecureServiceValidation(mid, otp_request, isTest, regional);
                return [2 /*return*/, secure.subscribe({
                        error: function (err) {
                            return Kushki_1.Kushki.callbackError(err, callback);
                        },
                        next: function (response) {
                            callback({
                                isValid: CardService_1._is3dsValid(response)
                            });
                        }
                    })];
            });
        }); });
    };
    CardService._initCardinal = function (jwt, cardNumber) {
        window.Cardinal.setup("init", {
            jwt: jwt,
            order: {
                Consumer: {
                    Account: {
                        AccountNumber: cardNumber
                    }
                }
            }
        });
    };
    CardService._ccaCardinal = function (tokenResponse) {
        window.Cardinal["continue"]("cca", {
            AcsUrl: tokenResponse.security.acsURL,
            Payload: tokenResponse.security.paReq
        }, {
            OrderDetails: {
                TransactionId: tokenResponse.security.authenticationTransactionId
            }
        });
    };
    // istanbul ignore next
    CardService._is3dsValid = function (secureOtpResponse) {
        return ("message" in secureOtpResponse &&
            ((secureOtpResponse.message === "3DS000" &&
                secureOtpResponse.code === "ok") ||
                (secureOtpResponse.code === "3DS000" &&
                    secureOtpResponse.message === "ok")));
    };
    CardService.prototype._setSandboxEnable = function (payload) {
        this._sandboxEnable = payload;
    };
    CardService.prototype._initCybersourceSandbox = function (mid, isTest, regional) {
        var _this = this;
        return rxjs_1.of(1).pipe(operators_1.switchMap(function () { return _this._gateway.cybersourceJwt(mid, isTest, regional); }), operators_1.map(function (jwtResponse) {
            cardinal_sandbox_js_1.KushkiCardinalSandbox.init();
            return jwtResponse.jwt;
        }));
    };
    CardService.prototype._ccaSandbox = function (body, mid, isTest, regional, callback) {
        var _this = this;
        cardinal_sandbox_js_1.KushkiCardinalSandbox["continue"]("cca", {
            AcsUrl: body.security.acsURL,
            Payload: body.security.paReq
        }, {
            OrderDetails: {
                TransactionId: body.security.authenticationTransactionId
            }
        });
        // istanbul ignore next
        cardinal_sandbox_js_1.KushkiCardinalSandbox.on("payments.validated", function (isErrorFlow) { return __awaiter(_this, void 0, void 0, function () {
            var otp_request, secure;
            return __generator(this, function (_a) {
                if (isErrorFlow === true)
                    return [2 /*return*/, Kushki_1.Kushki.callbackError(new KushkiError_1.KushkiError(ErrorEnum_1.ERRORS.E008), callback)];
                otp_request = {
                    otpValue: "",
                    secureServiceId: body.secureId
                };
                secure = this._gateway.requestSecureServiceValidation(mid, otp_request, isTest, regional);
                return [2 /*return*/, secure.subscribe({
                        error: function (err) {
                            return Kushki_1.Kushki.callbackError(err, callback);
                        },
                        next: function (response) {
                            return callback({
                                isValid: CardService_1._is3dsValid(response)
                            });
                        }
                    })];
            });
        }); });
    };
    CardService.prototype._getUserId = function (subscriptionId, mid, testEnv, regional, userId) {
        var _this = this;
        return rxjs_1.of(1).pipe(operators_1.switchMap(function () {
            return rxjs_1.iif(function () { return UtilsService_1.UtilsService.sIsEmpty(userId); }, _this._gateway.getUserId(subscriptionId, mid, testEnv, regional), rxjs_1.of(undefined));
        }), operators_1.catchError(function () { return rxjs_1.of(undefined); }));
    };
    CardService.prototype._requestSubscriptionTokenGateway = function (body, mid, testEnv, regional, callback, authorization) {
        this._gateway
            .requestSubscriptionToken(body, mid, testEnv, regional, authorization)
            .subscribe({
            error: function (err) {
                return Kushki_1.Kushki.callbackError(err, callback);
            },
            next: function (response) {
                callback(response);
            }
        });
    };
    CardService.prototype._requestDeviceToken = function (body, mid, testEnv, regional, callback) {
        this._gateway.requestDeviceToken(body, mid, testEnv, regional).subscribe({
            error: function (err) {
                return Kushki_1.Kushki.callbackError(err, callback);
            },
            next: function (response) {
                callback(response);
            }
        });
    };
    var CardService_1;
    CardService = CardService_1 = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(Identifiers_1.IDENTIFIERS.KushkiGateway)),
        __param(1, inversify_1.inject(Identifiers_1.IDENTIFIERS.AuthService)),
        __param(2, inversify_1.inject(Identifiers_1.IDENTIFIERS.AntiFraud)),
        __metadata("design:paramtypes", [Object, Object, Object])
    ], CardService);
    return CardService;
}());
exports.CardService = CardService;
