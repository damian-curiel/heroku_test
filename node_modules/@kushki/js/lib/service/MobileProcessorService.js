"use strict";
/**
 * MobileProcessor Service file
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
exports.__esModule = true;
exports.MobileProcessorService = void 0;
var Identifiers_1 = require("./../../lib/constant/Identifiers");
var KushkiError_1 = require("./../../lib/generic/KushkiError");
var ErrorEnum_1 = require("./../../lib/infrastructure/ErrorEnum");
var inversify_1 = require("inversify");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var MobileProcessorService = /** @class */ (function () {
    function MobileProcessorService(gateway) {
        this._gateway = gateway;
    }
    // istanbul ignore next
    MobileProcessorService.prototype.requestToken = function (request, publicCredential, isTest, regional) {
        var _this = this;
        var token;
        var apple_request = this.createAppleRequest(request);
        return rxjs_1.of(1).pipe(operators_1.mergeMap(function () {
            return new rxjs_1.Observable(function (observer) {
                // tslint:disable-next-line:no-any
                var apple_session = new window.ApplePaySession(2, apple_request);
                apple_session.onvalidatemerchant = function (event) {
                    return _this.onvalidatemerchant(event, observer, apple_session);
                };
                apple_session.begin();
            });
        }), operators_1.mergeMap(function (session) {
            return _this.requestGatewayToken(request, session, publicCredential, isTest, regional);
        }), operators_1.mergeMap(function (_a) {
            var session = _a[0], response = _a[1];
            token = response.token;
            delete response.token;
            session.session.completeMerchantValidation(response);
            return rxjs_1.of(session);
        }), operators_1.mergeMap(function (session) {
            return new rxjs_1.Observable(function (observer) {
                session.session.onpaymentauthorized = function (event) {
                    observer.next({
                        payment_token: event.payment,
                        session: session.session
                    });
                };
            });
        }), operators_1.mergeMap(function (session) {
            session.session.completePayment(
            // tslint:disable-next-line:no-any
            window.ApplePaySession.STATUS_SUCCESS);
            return rxjs_1.of({
                token: token,
                paymentToken: session.payment_token
            });
        }), operators_1.catchError(function (error) {
            if (error.message ===
                "The object does not support the operation or argument.")
                return rxjs_1.throwError(new KushkiError_1.KushkiError(ErrorEnum_1.ERRORS.E006));
            return rxjs_1.throwError(error);
        }));
    };
    MobileProcessorService.prototype.requestGatewayToken = function (request, session, publicCredential, isTest, regional) {
        request.validationUrl = session.validation_url;
        request.domainName = session.current_url;
        delete request.description;
        return rxjs_1.forkJoin([
            rxjs_1.of(session),
            this._gateway.requestMobileProcessorToken(request, publicCredential, isTest, regional),
        ]).pipe(operators_1.catchError(function (err) {
            session.session.abort();
            return rxjs_1.throwError(err);
        }));
    };
    MobileProcessorService.prototype.requestGatewayCharge = function (token, publicCredential, isTest, regional, request, session) {
        var charge_request = {
            token: token,
            amount: request.totalAmount,
            currency: request.currency,
            encodedPaymentToken: session.payment_token,
            softDescriptor: "KushkiPagos"
        };
        return rxjs_1.forkJoin([
            rxjs_1.of(session),
            this._gateway.chargeMobileProcessor(charge_request, publicCredential, isTest, regional),
        ]);
    };
    MobileProcessorService.prototype.createAppleRequest = function (request) {
        return {
            countryCode: "US",
            currencyCode: "USD",
            merchantCapabilities: ["supports3DS"],
            requiredBillingContactFields: ["postalAddress", "name"],
            requiredShippingContactFields: ["postalAddress", "email", "phone"],
            supportedNetworks: ["amex", "discover", "jcb", "masterCard", "visa"],
            total: {
                amount: request.totalAmount,
                label: request.description,
                type: "final"
            }
        };
    };
    MobileProcessorService.prototype.completePayment = function (session, response) {
        session.session.completePayment(
        // tslint:disable-next-line:no-any
        window.ApplePaySession.STATUS_SUCCESS);
        return rxjs_1.of(response);
    };
    MobileProcessorService.prototype.onvalidatemerchant = function (event, observer, session) {
        var validation_url = event.validationURL;
        var current_url = window.location.host;
        observer.next({ current_url: current_url, validation_url: validation_url, session: session });
    };
    MobileProcessorService.prototype.paymentAuthorized = function (event, observer, session) {
        var payment_token = event.payment;
        observer.next({ payment_token: payment_token, session: session.session });
    };
    MobileProcessorService = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(Identifiers_1.IDENTIFIERS.KushkiGateway)),
        __metadata("design:paramtypes", [Object])
    ], MobileProcessorService);
    return MobileProcessorService;
}());
exports.MobileProcessorService = MobileProcessorService;
