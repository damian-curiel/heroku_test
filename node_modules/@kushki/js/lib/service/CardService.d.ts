/* tslint:disable:all */
/**
 * Card Service file
 */
import "reflect-metadata";
import { IAntiFraud } from "./../../lib/repository/IAntiFraud";
import { IAuthService } from "./../../lib/repository/IAuthService";
import { ICardService } from "./../../lib/repository/ICardService";
import { IKushkiGateway } from "./../../lib/repository/IKushkiGateway";
import { Observable } from "rxjs";
import { BinBody } from "./../../lib/types/bin_body";
import { BinInfoResponse } from "./../../lib/types/bin_info_response";
import { ErrorResponse } from "./../../lib/types/error_response";
import { IDeferredResponse } from "./../../lib/types/remote/deferred_response";
import { TokenResponse } from "./../../lib/types/remote/token_response";
import { SecureInitRequest } from "./../../lib/types/secure_init_request";
import { SecureInitResponse } from "./../../lib/types/secure_init_response";
import { SubscriptionTokenKPayRequest } from "./../../lib/types/subscription_token_kpay_request";
import { SubscriptionTokenRequest } from "./../../lib/types/subscription_token_request";
import { SubscriptionIdRequest } from "./../../lib/types/subscriptionId_request";
import { TokenKPayRequest } from "./../../lib/types/token_kpay_request";
import { TokenRequest } from "./../../lib/types/token_request";
import { Validate3DSRequest } from "./../../lib/types/validate_3ds_request";
import { Validate3DsResponse } from "./../../lib/types/validate_3ds_response";
/**
 * Implementation
 */
declare global {
    interface Window {
        Cardinal: any;
        KushkiCardinalSandbox: any;
    }
}
export declare class CardService implements ICardService {
    private readonly _gateway;
    private readonly _receipt;
    private readonly _antiFraud;
    private readonly _authService;
    private readonly _3Dsecure;
    private readonly _cardNumber;
    private _sandboxEnable;
    constructor(gateway: IKushkiGateway, authService: IAuthService, antiFraud: IAntiFraud);
    requestToken(request: TokenRequest | TokenKPayRequest, mid: string, isTest: boolean, regional: boolean, callback: (value: TokenResponse | ErrorResponse) => void): void;
    requestDeviceToken(request: SubscriptionIdRequest, mid: string, isTest: boolean, regional: boolean, callback: (value: TokenResponse | ErrorResponse) => void): void;
    requestSubscriptionToken(subscriptionTokenRequest: SubscriptionTokenRequest | SubscriptionTokenKPayRequest, mid: string, isTest: boolean, regional: boolean, callback: (value: TokenResponse | ErrorResponse) => void): void;
    requestDeferred(binBody: BinBody, mid: string, isTest: boolean, regional: boolean): Observable<IDeferredResponse[]>;
    requestBinInfo(binBody: BinBody, mid: string, isTest: boolean, regional: boolean): Observable<BinInfoResponse>;
    validate3DS(body: Validate3DSRequest, mid: string, isTest: boolean, regional: boolean, callback: (value: Validate3DsResponse | ErrorResponse) => void): void;
    requestSecureInit(request: SecureInitRequest, mid: string, isTest: boolean, regional: boolean): Observable<SecureInitResponse>;
    private _getCreateSubscriptionDataToTransform;
    private _request3DSToken;
    private _setupCompleteCardinal;
    private _requestTokenGateway;
    private _getMerchantSettings;
    private _validateParameters;
    private _getDeviceTokenSiftScienceObject;
    private _createSubscriptionSiftScienceSession;
    private _checkCardLength;
    private _getScienceSession;
    private _checkCurrency;
    private _getRequestSiftObject;
    private _checkAmount;
    private _checkRequestBody;
    private _getCybersourceJwt;
    private _isSandboxEnabled;
    private _getCybersourceJwtSubscription;
    private _is3DSSecureEnabled;
    private _initCybersource;
    private _initializeCardinal;
    private _initCybersourceSubscription;
    private _completeCardinal;
    private static _initCardinal;
    private static _ccaCardinal;
    private static _is3dsValid;
    private _setSandboxEnable;
    private _initCybersourceSandbox;
    private _ccaSandbox;
    private _getUserId;
    private _requestSubscriptionTokenGateway;
    private _requestDeviceToken;
}
