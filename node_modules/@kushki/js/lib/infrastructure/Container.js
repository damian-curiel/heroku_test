"use strict";
exports.__esModule = true;
exports.CONTAINER = void 0;
/**
 * Container
 */
var Identifiers_1 = require("./../../lib/constant/Identifiers");
var KushkiGateway_1 = require("./../../lib/gateway/KushkiGateway");
var SiftScience_1 = require("./../../lib/gateway/SiftScience");
var inversify_1 = require("inversify");
var AuthService_1 = require("./../../lib/service/AuthService");
var CardAsyncService_1 = require("./../../lib/service/CardAsyncService");
var CardDynamicService_1 = require("./../../lib/service/CardDynamicService");
var CardService_1 = require("./../../lib/service/CardService");
var CardSubscriptionDynamicService_1 = require("./../../lib/service/CardSubscriptionDynamicService");
var CashService_1 = require("./../../lib/service/CashService");
var CommissionService_1 = require("./../../lib/service/CommissionService");
var KPayService_1 = require("./../../lib/service/KPayService");
var KushkiService_1 = require("./../../lib/service/KushkiService");
var MobileProcessorService_1 = require("./../../lib/service/MobileProcessorService");
var MultiMerchantService_1 = require("./../../lib/service/MultiMerchantService");
var PayoutsCashService_1 = require("./../../lib/service/PayoutsCashService");
var PayoutsTransferService_1 = require("./../../lib/service/PayoutsTransferService");
var SecureService_1 = require("./../../lib/service/SecureService");
var SiftScienceService_1 = require("./../../lib/service/SiftScienceService");
var TransferService_1 = require("./../../lib/service/TransferService");
var TransferSubscriptionsService_1 = require("./../../lib/service/TransferSubscriptionsService");
var CONTAINER = new inversify_1.Container();
exports.CONTAINER = CONTAINER;
// Service
CONTAINER.bind(Identifiers_1.IDENTIFIERS.AuthService).toFactory(function (context) { return function () {
    return new AuthService_1.AuthService(context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.CardService).toFactory(function (context) { return function (regional) {
    return new CardService_1.CardService(context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway), context.container.get(Identifiers_1.IDENTIFIERS.AuthService)(regional), context.container.get(Identifiers_1.IDENTIFIERS.AntiFraud)(regional));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.CashService).toFactory(function (context) { return function (regional) {
    return new CashService_1.CashService(context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway), context.container.get(Identifiers_1.IDENTIFIERS.AntiFraud)(regional));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.CardDynamicService).toFactory(function (context) { return function () {
    return new CardDynamicService_1.CardDynamicService(context.container.get(Identifiers_1.IDENTIFIERS.CardService)(), context.container.get(Identifiers_1.IDENTIFIERS.CardAsyncService)());
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.CardSubscriptionDynamicService).toFactory(function (context) { return function () {
    return new CardSubscriptionDynamicService_1.CardSubscriptionDynamicService(context.container.get(Identifiers_1.IDENTIFIERS.CardService)(), context.container.get(Identifiers_1.IDENTIFIERS.CardAsyncService)());
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.MobileProcessorService).toFactory(function (context) { return function () {
    return new MobileProcessorService_1.MobileProcessorService(context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.KushkiService).toFactory(function (context) { return function (_regional) {
    return new KushkiService_1.KushkiService(context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.TransferService).toFactory(function (context) { return function (regional) {
    return new TransferService_1.TransferService(context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway), context.container.get(Identifiers_1.IDENTIFIERS.AntiFraud)(regional));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.SecureService).toFactory(function (context) { return function () {
    return new SecureService_1.SecureService(context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.MultiMerchantService).toFactory(function (context) { return function () {
    return new MultiMerchantService_1.MultiMerchantService(context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.CommissionService).toFactory(function (context) { return function () {
    return new CommissionService_1.CommissionService(context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.CardAsyncService).toFactory(function (context) { return function () {
    return new CardAsyncService_1.CardAsyncService(context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.PayoutsCashService).toFactory(function (context) { return function (regional) {
    return new PayoutsCashService_1.PayoutsCashService(context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway), context.container.get(Identifiers_1.IDENTIFIERS.AntiFraud)(regional));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.TransferSubscriptionService).toFactory(function (context) { return function (regional) {
    return new TransferSubscriptionsService_1.TransferSubscriptionsService(context.container.get(Identifiers_1.IDENTIFIERS.AntiFraud)(regional), context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.PayoutsTransferService).toFactory(function (context) { return function (regional) {
    return new PayoutsTransferService_1.PayoutsTransferService(context.container.get(Identifiers_1.IDENTIFIERS.AntiFraud)(regional), context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.KPayService).toFactory(function (context) { return function (regional) {
    return new KPayService_1.KPayService(context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway), context.container.get(Identifiers_1.IDENTIFIERS.AuthService)(regional));
}; });
CONTAINER.bind(Identifiers_1.IDENTIFIERS.SiftScienceService).toFactory(function (context) { return function (regional) {
    return new SiftScienceService_1.SiftScienceService(context.container.get(Identifiers_1.IDENTIFIERS.KushkiGateway), context.container.get(Identifiers_1.IDENTIFIERS.AntiFraud)(regional));
}; });
// Gateway
CONTAINER.bind(Identifiers_1.IDENTIFIERS.KushkiGateway).to(KushkiGateway_1.KushkiGateway);
CONTAINER.bind(Identifiers_1.IDENTIFIERS.AntiFraud).toFactory(function () { return function (regional) { return new SiftScience_1.SiftScience(regional); }; });
